// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_ip is a generated GoMock package.
package mock_ip

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIpRepoInter is a mock of IpRepoInter interface
type MockIpRepoInter struct {
	ctrl     *gomock.Controller
	recorder *MockIpRepoInterMockRecorder
}

// MockIpRepoInterMockRecorder is the mock recorder for MockIpRepoInter
type MockIpRepoInterMockRecorder struct {
	mock *MockIpRepoInter
}

// NewMockIpRepoInter creates a new mock instance
func NewMockIpRepoInter(ctrl *gomock.Controller) *MockIpRepoInter {
	mock := &MockIpRepoInter{ctrl: ctrl}
	mock.recorder = &MockIpRepoInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIpRepoInter) EXPECT() *MockIpRepoInterMockRecorder {
	return m.recorder
}

// ResetIpCoolDown mocks base method
func (m *MockIpRepoInter) ResetIpCoolDown(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetIpCoolDown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetIpCoolDown indicates an expected call of ResetIpCoolDown
func (mr *MockIpRepoInterMockRecorder) ResetIpCoolDown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetIpCoolDown", reflect.TypeOf((*MockIpRepoInter)(nil).ResetIpCoolDown), arg0)
}

// CreateFirstIpMask mocks base method
func (m *MockIpRepoInter) CreateFirstIpMask(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirstIpMask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFirstIpMask indicates an expected call of CreateFirstIpMask
func (mr *MockIpRepoInterMockRecorder) CreateFirstIpMask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirstIpMask", reflect.TypeOf((*MockIpRepoInter)(nil).CreateFirstIpMask), arg0)
}

// GetMaskData mocks base method
func (m *MockIpRepoInter) GetMaskData(arg0 string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaskData", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMaskData indicates an expected call of GetMaskData
func (mr *MockIpRepoInterMockRecorder) GetMaskData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaskData", reflect.TypeOf((*MockIpRepoInter)(nil).GetMaskData), arg0)
}

// SetMaskDataToDefault mocks base method
func (m *MockIpRepoInter) SetMaskDataToDefault(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaskDataToDefault", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaskDataToDefault indicates an expected call of SetMaskDataToDefault
func (mr *MockIpRepoInterMockRecorder) SetMaskDataToDefault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaskDataToDefault", reflect.TypeOf((*MockIpRepoInter)(nil).SetMaskDataToDefault), arg0)
}

// SetMaskCoolDown mocks base method
func (m *MockIpRepoInter) SetMaskCoolDown(arg0 string, arg1 int, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaskCoolDown", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaskCoolDown indicates an expected call of SetMaskCoolDown
func (mr *MockIpRepoInterMockRecorder) SetMaskCoolDown(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaskCoolDown", reflect.TypeOf((*MockIpRepoInter)(nil).SetMaskCoolDown), arg0, arg1, arg2)
}

// UpdateMaskData mocks base method
func (m *MockIpRepoInter) UpdateMaskData(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaskData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaskData indicates an expected call of UpdateMaskData
func (mr *MockIpRepoInterMockRecorder) UpdateMaskData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaskData", reflect.TypeOf((*MockIpRepoInter)(nil).UpdateMaskData), arg0)
}
